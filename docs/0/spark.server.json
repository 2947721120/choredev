{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"file:///Users/devoncarew/tools/eclipse_37/eclipse/dart-sdk/lib/core/object.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"isThrowable":true,"kind":"class","name":"Exception","id":"Exception","comment":"\nA marker interface implemented by all core library exceptions.\n\nAn [Exception] is intended to convey information to the user about a failure,\nso that the error can be addressed programmatically. It is intended to be\ncaught, and it should contain useful data fields.\n\nCreating instances of [Exception] directly with [:new Exception(\"message\"):]\nis discouraged, and only included as a temporary measure during development,\nuntil the actual exceptions used by a library are done.\n","children":[{"returnType":{"name":"Exception","refId":"dart.core/Exception"},"kind":"constructor","name":"","id":"1()","children":[{"isOptional":true,"kind":"param","name":"message","id":"message"}],"line":"21"}],"uri":"file:///Users/devoncarew/tools/eclipse_37/eclipse/dart-sdk/lib/core/exceptions.dart","line":"20"}],"uri":"file:///Users/devoncarew/tools/eclipse_37/eclipse/dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","id":"spark.server","comment":"\nAn embedded http server. This is used when launching web apps from Spark.\n","children":[{"ref":{"name":"DateFormat","refId":"intl/DateFormat"},"isFinal":true,"kind":"variable","name":"RFC_1123_DATE_FORMAT","id":"RFC_1123_DATE_FORMAT","line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"DEFAULT_HTTP_PORT","id":"DEFAULT_HTTP_PORT","line":"18"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"BytesBuilder","id":"BytesBuilder","comment":"\nBuilds a list of bytes, allowing bytes and lists of bytes to be added at the\nend.\n\nUsed to efficiently collect bytes and lists of bytes, using an internal\nbuffer. Note that it's optimized for IO, using an initial buffer of 1K bytes.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"\nAppends [bytes] to the current contents of the builder.\n\nEach value of [bytes] will be bit-representation truncated to the range\n0 .. 255.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"}],"line":"1129"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addByte","id":"addByte1()","comment":"\nAppend [byte] to the current contents of the builder.\n\nThe [byte] will be bit-representation truncated to the range 0 .. 255.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"byte","id":"byte"}],"line":"1136"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"takeBytes","id":"takeBytes0()","comment":"\nReturns the contents of `this` and clears `this`.\n\nThe list returned is a view of the the internal buffer, limited to the\n[length].\n","line":"1144"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"toBytes","id":"toBytes0()","comment":"\nReturns a copy of the current contents of the builder.\n\nLeaves the contents of the builder intact.\n","line":"1155"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nClear the contents of the builder.\n","line":"1175"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nThe number of bytes in the builder.\n","line":"1160"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns `true` if the buffer is empty.\n","line":"1165"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns `true` if the buffer is empty.\n","line":"1170"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"variable","name":"_buffer","id":"_buffer","isPrivate":true,"line":"1116"},{"kind":"constructor","name":"","id":"0()","comment":"\nConstruct a new empty [BytesBuilder].\n","line":"1121"}],"line":"1115"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_CharCode","id":"_CharCode","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"HT","id":"HT","line":"1091"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"LF","id":"LF","line":"1092"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"CR","id":"CR","line":"1093"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SP","id":"SP","line":"1094"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"AMPERSAND","id":"AMPERSAND","line":"1095"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"COMMA","id":"COMMA","line":"1096"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"DASH","id":"DASH","line":"1097"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SLASH","id":"SLASH","line":"1098"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"ZERO","id":"ZERO","line":"1099"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"ONE","id":"ONE","line":"1100"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"COLON","id":"COLON","line":"1101"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SEMI_COLON","id":"SEMI_COLON","line":"1102"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"EQUAL","id":"EQUAL","line":"1103"}],"isPrivate":true,"line":"1090"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"HttpHeaders","refId":"spark.server/HttpHeaders"}],"kind":"class","name":"_HttpHeaders","id":"_HttpHeaders","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"693"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"value","id":"value1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"698"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"kind":"param","name":"value","id":"value"}],"line":"708"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"set","id":"set2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"719"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"remove","id":"remove2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"726"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeAll","id":"removeAll1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"739"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name","uri":"file:///Users/devoncarew/projects/spark.dart/app/lib/server.dart","line":"745"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"values","id":"values","uri":"file:///Users/devoncarew/projects/spark.dart/app/lib/server.dart","line":"745"}],"uri":"file:///Users/devoncarew/tools/eclipse_37/eclipse/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"745"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"noFolding","id":"noFolding1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"749"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"persistentConnection=","id":"persistentConnection=1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"persistentConnection","id":"persistentConnection"}],"line":"765"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"contentLength=","id":"contentLength=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"contentLength","id":"contentLength"}],"line":"779"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"chunkedTransferEncoding=","id":"chunkedTransferEncoding=1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"chunkedTransferEncoding","id":"chunkedTransferEncoding"}],"line":"791"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"host=","id":"host=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"host","id":"host"}],"line":"807"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"port=","id":"port=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"port","id":"port"}],"line":"815"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"ifModifiedSince=","id":"ifModifiedSince=1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"ifModifiedSince","id":"ifModifiedSince"}],"line":"833"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"date=","id":"date=1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"date","id":"date"}],"line":"852"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"expires=","id":"expires=1()","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"expires","id":"expires"}],"line":"871"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"contentType=","id":"contentType=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"contentType","id":"contentType"}],"line":"887"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_add","id":"_add2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"892"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addValue","id":"_addValue2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"965"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_set","id":"_set2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"978"},{"kind":"method","name":"_checkMutable","id":"_checkMutable0()","isPrivate":true,"line":"985"},{"kind":"method","name":"_updateHostHeader","id":"_updateHostHeader0()","isPrivate":true,"line":"989"},{"kind":"method","name":"_foldHeader","id":"_foldHeader1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"isPrivate":true,"line":"995"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_synchronize","id":"_synchronize0()","isPrivate":true,"line":"1004"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_finalize","id":"_finalize0()","isPrivate":true,"line":"1023"},{"kind":"method","name":"_write","id":"_write1()","children":[{"ref":{"name":"BytesBuilder","refId":"spark.server/BytesBuilder"},"kind":"param","name":"builder","id":"builder"}],"isPrivate":true,"line":"1028"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"1055"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"persistentConnection","id":"persistentConnection","line":"754"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"contentLength","id":"contentLength","line":"777"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"chunkedTransferEncoding","id":"chunkedTransferEncoding","line":"789"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"host","id":"host","line":"805"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"port","id":"port","line":"813"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"property","name":"ifModifiedSince","id":"ifModifiedSince","line":"821"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"property","name":"date","id":"date","line":"840"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"property","name":"expires","id":"expires","line":"859"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"contentType","id":"contentType","line":"878"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_mutable","id":"_mutable","isPrivate":true,"line":"1078"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]}]},"kind":"variable","name":"_headers","id":"_headers","isPrivate":true,"line":"1079"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"variable","name":"_noFoldingHeaders","id":"_noFoldingHeaders","isPrivate":true,"line":"1080"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_contentLength","id":"_contentLength","isPrivate":true,"line":"1082"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_chunkedTransferEncoding","id":"_chunkedTransferEncoding","isPrivate":true,"line":"1083"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"protocolVersion","id":"protocolVersion","line":"1084"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_host","id":"_host","isPrivate":true,"line":"1085"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_port","id":"_port","isPrivate":true,"line":"1086"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"protocolVersion","refId":"spark.server/_HttpHeaders/protocolVersion"},"kind":"param","name":"protocolVersion","id":"protocolVersion"}],"line":"690"}],"isPrivate":true,"line":"689"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"isThrowable":true,"kind":"class","name":"HttpException","id":"HttpException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"678"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"message","id":"message","line":"673"},{"ref":{"name":"Uri","refId":"dart.core/Uri"},"isFinal":true,"kind":"variable","name":"uri","id":"uri","line":"674"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"message","refId":"spark.server/HttpException/message"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"Uri","refId":"dart.core/Uri"},"isOptional":true,"isNamed":true,"initializedField":{"name":"uri","refId":"spark.server/HttpException/uri"},"kind":"param","name":"uri","id":"uri"}],"line":"676"}],"line":"672"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"HttpHeaders","id":"HttpHeaders","comment":"\nAccess to the HTTP headers for requests and responses. In some\nsituations the headers will be immutable and the mutating methods\nwill then throw exceptions.\n\nFor all operations on HTTP headers the header name is\ncase-insensitive.\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns the list of values for the header named [name]. If there\nis no header with the provided name, [:null:] will be returned.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"562"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"value","id":"value1()","comment":"\nConvenience method for the value for a single valued header. If\nthere is no header with the provided name, [:null:] will be\nreturned. If the header has more than one value an exception is\nthrown.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"570"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add2()","comment":"\nAdds a header value. The header named [name] will have the value\n[value] added to its list of values. Some headers are single\nvalued, and for these adding a value will replace the previous\nvalue. If the value is of type DateTime a HTTP date format will be\napplied. If the value is a [:List:] each element of the list will\nbe added separately. For all other types the default [:toString:]\nmethod will be used.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"581"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"set","id":"set2()","comment":"\nSets a header. The header named [name] will have all its values\ncleared before the value [value] is added as its value.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"587"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"remove","id":"remove2()","comment":"\nRemoves a specific value for a header name. Some headers have\nsystem supplied values and for these the system supplied values\nwill still be added to the collection of values for the header.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"594"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeAll","id":"removeAll1()","comment":"\nRemoves all values for the specified header name. Some headers\nhave system supplied values and for these the system supplied\nvalues will still be added to the collection of values for the\nheader.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"602"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nEnumerates the headers, applying the function [f] to each\nheader. The header name passed in [:name:] will be all lower\ncase.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name","uri":"file:///Users/devoncarew/projects/spark.dart/app/lib/server.dart","line":"609"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"values","id":"values","uri":"file:///Users/devoncarew/projects/spark.dart/app/lib/server.dart","line":"609"}],"uri":"file:///Users/devoncarew/tools/eclipse_37/eclipse/dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"609"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"noFolding","id":"noFolding1()","comment":"\nDisables folding for the header named [name] when sending the HTTP\nheader. By default, multiple header values are folded into a\nsingle header line by separating the values with commas. The\n'set-cookie' header has folding disabled by default.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"617"},{"isStatic":true,"kind":"variable","name":"ACCEPT","id":"ACCEPT","line":"454"},{"isStatic":true,"kind":"variable","name":"ACCEPT_CHARSET","id":"ACCEPT_CHARSET","line":"455"},{"isStatic":true,"kind":"variable","name":"ACCEPT_ENCODING","id":"ACCEPT_ENCODING","line":"456"},{"isStatic":true,"kind":"variable","name":"ACCEPT_LANGUAGE","id":"ACCEPT_LANGUAGE","line":"457"},{"isStatic":true,"kind":"variable","name":"ACCEPT_RANGES","id":"ACCEPT_RANGES","line":"458"},{"isStatic":true,"kind":"variable","name":"AGE","id":"AGE","line":"459"},{"isStatic":true,"kind":"variable","name":"ALLOW","id":"ALLOW","line":"460"},{"isStatic":true,"kind":"variable","name":"AUTHORIZATION","id":"AUTHORIZATION","line":"461"},{"isStatic":true,"kind":"variable","name":"CACHE_CONTROL","id":"CACHE_CONTROL","line":"462"},{"isStatic":true,"kind":"variable","name":"CONNECTION","id":"CONNECTION","line":"463"},{"isStatic":true,"kind":"variable","name":"CONTENT_ENCODING","id":"CONTENT_ENCODING","line":"464"},{"isStatic":true,"kind":"variable","name":"CONTENT_LANGUAGE","id":"CONTENT_LANGUAGE","line":"465"},{"isStatic":true,"kind":"variable","name":"CONTENT_LENGTH","id":"CONTENT_LENGTH","line":"466"},{"isStatic":true,"kind":"variable","name":"CONTENT_LOCATION","id":"CONTENT_LOCATION","line":"467"},{"isStatic":true,"kind":"variable","name":"CONTENT_MD5","id":"CONTENT_MD5","line":"468"},{"isStatic":true,"kind":"variable","name":"CONTENT_RANGE","id":"CONTENT_RANGE","line":"469"},{"isStatic":true,"kind":"variable","name":"CONTENT_TYPE","id":"CONTENT_TYPE","line":"470"},{"isStatic":true,"kind":"variable","name":"DATE","id":"DATE","line":"471"},{"isStatic":true,"kind":"variable","name":"ETAG","id":"ETAG","line":"472"},{"isStatic":true,"kind":"variable","name":"EXPECT","id":"EXPECT","line":"473"},{"isStatic":true,"kind":"variable","name":"EXPIRES","id":"EXPIRES","line":"474"},{"isStatic":true,"kind":"variable","name":"FROM","id":"FROM","line":"475"},{"isStatic":true,"kind":"variable","name":"HOST","id":"HOST","line":"476"},{"isStatic":true,"kind":"variable","name":"IF_MATCH","id":"IF_MATCH","line":"477"},{"isStatic":true,"kind":"variable","name":"IF_MODIFIED_SINCE","id":"IF_MODIFIED_SINCE","line":"478"},{"isStatic":true,"kind":"variable","name":"IF_NONE_MATCH","id":"IF_NONE_MATCH","line":"479"},{"isStatic":true,"kind":"variable","name":"IF_RANGE","id":"IF_RANGE","line":"480"},{"isStatic":true,"kind":"variable","name":"IF_UNMODIFIED_SINCE","id":"IF_UNMODIFIED_SINCE","line":"481"},{"isStatic":true,"kind":"variable","name":"LAST_MODIFIED","id":"LAST_MODIFIED","line":"482"},{"isStatic":true,"kind":"variable","name":"LOCATION","id":"LOCATION","line":"483"},{"isStatic":true,"kind":"variable","name":"MAX_FORWARDS","id":"MAX_FORWARDS","line":"484"},{"isStatic":true,"kind":"variable","name":"PRAGMA","id":"PRAGMA","line":"485"},{"isStatic":true,"kind":"variable","name":"PROXY_AUTHENTICATE","id":"PROXY_AUTHENTICATE","line":"486"},{"isStatic":true,"kind":"variable","name":"PROXY_AUTHORIZATION","id":"PROXY_AUTHORIZATION","line":"487"},{"isStatic":true,"kind":"variable","name":"RANGE","id":"RANGE","line":"488"},{"isStatic":true,"kind":"variable","name":"REFERER","id":"REFERER","line":"489"},{"isStatic":true,"kind":"variable","name":"RETRY_AFTER","id":"RETRY_AFTER","line":"490"},{"isStatic":true,"kind":"variable","name":"SERVER","id":"SERVER","line":"491"},{"isStatic":true,"kind":"variable","name":"TE","id":"TE","line":"492"},{"isStatic":true,"kind":"variable","name":"TRAILER","id":"TRAILER","line":"493"},{"isStatic":true,"kind":"variable","name":"TRANSFER_ENCODING","id":"TRANSFER_ENCODING","line":"494"},{"isStatic":true,"kind":"variable","name":"UPGRADE","id":"UPGRADE","line":"495"},{"isStatic":true,"kind":"variable","name":"USER_AGENT","id":"USER_AGENT","line":"496"},{"isStatic":true,"kind":"variable","name":"VARY","id":"VARY","line":"497"},{"isStatic":true,"kind":"variable","name":"VIA","id":"VIA","line":"498"},{"isStatic":true,"kind":"variable","name":"WARNING","id":"WARNING","line":"499"},{"isStatic":true,"kind":"variable","name":"WWW_AUTHENTICATE","id":"WWW_AUTHENTICATE","line":"500"},{"isStatic":true,"kind":"variable","name":"COOKIE","id":"COOKIE","line":"503"},{"isStatic":true,"kind":"variable","name":"SET_COOKIE","id":"SET_COOKIE","line":"504"},{"isStatic":true,"kind":"variable","name":"GENERAL_HEADERS","id":"GENERAL_HEADERS","line":"506"},{"isStatic":true,"kind":"variable","name":"ENTITY_HEADERS","id":"ENTITY_HEADERS","line":"516"},{"isStatic":true,"kind":"variable","name":"RESPONSE_HEADERS","id":"RESPONSE_HEADERS","line":"528"},{"isStatic":true,"kind":"variable","name":"REQUEST_HEADERS","id":"REQUEST_HEADERS","line":"538"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"variable","name":"date","id":"date","comment":"\nGets and sets the date. The value of this property will\nreflect the 'date' header.\n","line":"623"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"variable","name":"expires","id":"expires","comment":"\nGets and sets the expiry date. The value of this property will\nreflect the 'expires' header.\n","line":"629"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"variable","name":"ifModifiedSince","id":"ifModifiedSince","comment":"\nGets and sets the \"if-modified-since\" date. The value of this property will\nreflect the \"if-modified-since\" header.\n","line":"635"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"host","id":"host","comment":"\nGets and sets the host part of the 'host' header for the\nconnection.\n","line":"641"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"port","id":"port","comment":"\nGets and sets the port part of the 'host' header for the\nconnection.\n","line":"647"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"contentType","id":"contentType","comment":"\nGets and sets the content type. Note that the content type in the header\nwill only be updated if this field is set directly. Mutating the returned\ncurrent value will have no effect.\n","line":"654"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"contentLength","id":"contentLength","comment":"\nGets and sets the content length header value.\n","line":"659"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"persistentConnection","id":"persistentConnection","comment":"\nGets and sets the persistent connection header value.\n","line":"664"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"chunkedTransferEncoding","id":"chunkedTransferEncoding","comment":"\nGets and sets the chunked transfer encoding header value.\n","line":"669"}],"line":"453"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"HttpStatus","id":"HttpStatus","comment":"\nHTTP status codes.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"getReasonPhrase","id":"getReasonPhrase1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"statusCode","id":"statusCode"}],"line":"393"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"CONTINUE","id":"CONTINUE","line":"349"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SWITCHING_PROTOCOLS","id":"SWITCHING_PROTOCOLS","line":"350"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"OK","id":"OK","line":"351"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"CREATED","id":"CREATED","line":"352"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"ACCEPTED","id":"ACCEPTED","line":"353"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"NON_AUTHORITATIVE_INFORMATION","id":"NON_AUTHORITATIVE_INFORMATION","line":"354"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"NO_CONTENT","id":"NO_CONTENT","line":"355"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"RESET_CONTENT","id":"RESET_CONTENT","line":"356"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"PARTIAL_CONTENT","id":"PARTIAL_CONTENT","line":"357"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MULTIPLE_CHOICES","id":"MULTIPLE_CHOICES","line":"358"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MOVED_PERMANENTLY","id":"MOVED_PERMANENTLY","line":"359"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"FOUND","id":"FOUND","line":"360"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MOVED_TEMPORARILY","id":"MOVED_TEMPORARILY","line":"361"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SEE_OTHER","id":"SEE_OTHER","line":"362"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"NOT_MODIFIED","id":"NOT_MODIFIED","line":"363"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"USE_PROXY","id":"USE_PROXY","line":"364"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"TEMPORARY_REDIRECT","id":"TEMPORARY_REDIRECT","line":"365"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"BAD_REQUEST","id":"BAD_REQUEST","line":"366"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"UNAUTHORIZED","id":"UNAUTHORIZED","line":"367"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"PAYMENT_REQUIRED","id":"PAYMENT_REQUIRED","line":"368"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"FORBIDDEN","id":"FORBIDDEN","line":"369"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"NOT_FOUND","id":"NOT_FOUND","line":"370"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"METHOD_NOT_ALLOWED","id":"METHOD_NOT_ALLOWED","line":"371"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"NOT_ACCEPTABLE","id":"NOT_ACCEPTABLE","line":"372"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"PROXY_AUTHENTICATION_REQUIRED","id":"PROXY_AUTHENTICATION_REQUIRED","line":"373"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"REQUEST_TIMEOUT","id":"REQUEST_TIMEOUT","line":"374"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"CONFLICT","id":"CONFLICT","line":"375"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"GONE","id":"GONE","line":"376"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"LENGTH_REQUIRED","id":"LENGTH_REQUIRED","line":"377"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"PRECONDITION_FAILED","id":"PRECONDITION_FAILED","line":"378"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"REQUEST_ENTITY_TOO_LARGE","id":"REQUEST_ENTITY_TOO_LARGE","line":"379"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"REQUEST_URI_TOO_LONG","id":"REQUEST_URI_TOO_LONG","line":"380"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"UNSUPPORTED_MEDIA_TYPE","id":"UNSUPPORTED_MEDIA_TYPE","line":"381"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"REQUESTED_RANGE_NOT_SATISFIABLE","id":"REQUESTED_RANGE_NOT_SATISFIABLE","line":"382"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"EXPECTATION_FAILED","id":"EXPECTATION_FAILED","line":"383"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"INTERNAL_SERVER_ERROR","id":"INTERNAL_SERVER_ERROR","line":"384"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"NOT_IMPLEMENTED","id":"NOT_IMPLEMENTED","line":"385"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"BAD_GATEWAY","id":"BAD_GATEWAY","line":"386"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SERVICE_UNAVAILABLE","id":"SERVICE_UNAVAILABLE","line":"387"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"GATEWAY_TIMEOUT","id":"GATEWAY_TIMEOUT","line":"388"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"HTTP_VERSION_NOT_SUPPORTED","id":"HTTP_VERSION_NOT_SUPPORTED","line":"389"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"NETWORK_CONNECT_TIMEOUT_ERROR","id":"NETWORK_CONNECT_TIMEOUT_ERROR","line":"391"}],"line":"348"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"HttpResponse","id":"HttpResponse","comment":"\nAn [HttpResponse] represents the headers and data to be returned to\na client in response to an HTTP request.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setContent","id":"setContent1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"line":"280"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setContentBytes","id":"setContentBytes1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"data","id":"data"}],"line":"286"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setContentStream","id":"setContentStream1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"param","name":"streamData","id":"streamData"}],"line":"291"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setContentTypeFrom","id":"setContentTypeFrom1()","comment":"\nSet the content type for this response given a file path. This auto-detects\nbased on the file extension.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"line":"300"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"_send","id":"_send1()","children":[{"ref":{"name":"TcpClient","refId":"spark.tcp/TcpClient"},"kind":"param","name":"client","id":"client"}],"isPrivate":true,"line":"304"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"342"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"contentLength","id":"contentLength","comment":"\nGets and sets the content length of the response. If the size of\nthe response is not known in advance set the content length to\n-1 - which is also the default if not set.\n","line":"248"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"_calcPhrase","id":"_calcPhrase","isPrivate":true,"line":"334"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"statusCode","id":"statusCode","comment":"\nGets and sets the status code. Any integer value is accepted. For\nthe official HTTP status codes use the fields from\n[HttpStatus]. If no status code is explicitly set the default\nvalue [HttpStatus.OK] is used.\n","line":"256"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"reasonPhrase","id":"reasonPhrase","comment":"\nGets and sets the reason phrase. If no reason phrase is explicitly\nset a default reason phrase is provided.\n","line":"262"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"variable","name":"_data","id":"_data","isPrivate":true,"line":"264"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"variable","name":"_streamData","id":"_streamData","isPrivate":true,"line":"265"},{"ref":{"name":"HttpHeaders","refId":"spark.server/HttpHeaders"},"kind":"variable","name":"headers","id":"headers","comment":"\nThe response headers.\n","line":"270"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"initializedField":{"name":"statusCode","refId":"spark.server/HttpResponse/statusCode"},"kind":"param","name":"statusCode","id":"statusCode"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"initializedField":{"name":"reasonPhrase","refId":"spark.server/HttpResponse/reasonPhrase"},"kind":"param","name":"reasonPhrase","id":"reasonPhrase"}],"line":"272"},{"kind":"constructor","name":"ok","id":"ok0()","line":"276"},{"kind":"constructor","name":"notFound","id":"notFound0()","line":"277"},{"kind":"constructor","name":"badRequest","id":"badRequest0()","line":"278"}],"line":"242"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"HttpRequest","id":"HttpRequest","comment":"\nAn object that contains the content of and information of an HTTP request.\n","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"HttpRequest","refId":"spark.server/HttpRequest"}]},"isStatic":true,"kind":"method","name":"_parse","id":"_parse1()","children":[{"ref":{"name":"TcpClient","refId":"spark.tcp/TcpClient"},"kind":"param","name":"client","id":"client"}],"isPrivate":true,"line":"113"},{"returnType":{"name":"HttpRequest","refId":"spark.server/HttpRequest"},"isStatic":true,"kind":"method","name":"_parseHeader","id":"_parseHeader3()","children":[{"ref":{"name":"TcpClient","refId":"spark.tcp/TcpClient"},"kind":"param","name":"client","id":"client"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"headerData","id":"headerData","line":"155"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"remainingData","id":"remainingData","line":"155"}],"isPrivate":true,"line":"154"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_parseVersion","id":"_parseVersion1()","comment":"'HTTP/1.1' ==> '1.1'","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"ver","id":"ver"}],"isPrivate":true,"line":"196"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"235"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"contentLength","id":"contentLength","comment":"\nThe content length of the request body (read-only).\n\nIf the size of the request body is not known in advance, this value is -1.\n","line":"207"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"protocolVersion","id":"protocolVersion","comment":"\nThe HTTP protocol version used in the request, either \"1.0\" or \"1.1\"\n(read-only).\n","line":"231"},{"isStatic":true,"isFinal":true,"kind":"variable","name":"HEADER_END","id":"HEADER_END","line":"111"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"method","id":"method","comment":"\nThe method, such as 'GET' or 'POST', for the request (read-only).\n","line":"212"},{"ref":{"name":"Uri","refId":"dart.core/Uri"},"isFinal":true,"kind":"variable","name":"uri","id":"uri","comment":"\nThe URI for the request (read-only).\n\nThis provides access to the path, query string, and fragment identifier for\nthe request.\n","line":"220"},{"ref":{"name":"HttpHeaders","refId":"spark.server/HttpHeaders"},"isFinal":true,"kind":"variable","name":"headers","id":"headers","comment":"\nThe request headers (read-only).\n","line":"225"},{"kind":"constructor","name":"_","id":"_3()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"initializedField":{"name":"method","refId":"spark.server/HttpRequest/method"},"kind":"param","name":"method","id":"method"},{"ref":{"name":"Uri","refId":"dart.core/Uri"},"isOptional":true,"isNamed":true,"initializedField":{"name":"uri","refId":"spark.server/HttpRequest/uri"},"kind":"param","name":"uri","id":"uri"},{"ref":{"name":"HttpHeaders","refId":"spark.server/HttpHeaders"},"isOptional":true,"isNamed":true,"initializedField":{"name":"headers","refId":"spark.server/HttpRequest/headers"},"kind":"param","name":"headers","id":"headers"}],"isPrivate":true,"line":"233"}],"line":"110"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"PicoServlet","id":"PicoServlet","comment":"\nOne or more [PicoServlet]s can be added to a [PicoServer] in order to handle\nhttp requests.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"canServe","id":"canServe1()","comment":"\nReturns whether this servlet can serve the given [HttpRequest].\n","children":[{"ref":{"name":"HttpRequest","refId":"spark.server/HttpRequest"},"kind":"param","name":"request","id":"request"}],"line":"99"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"HttpResponse","refId":"spark.server/HttpResponse"}]},"kind":"method","name":"serve","id":"serve1()","comment":"\nHandle the given [HttpRequest], and return a Future with a [HttpResponse].\n","children":[{"ref":{"name":"HttpRequest","refId":"spark.server/HttpRequest"},"kind":"param","name":"request","id":"request"}],"line":"104"}],"line":"95"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"PicoServer","id":"PicoServer","comment":"\nAn embedded http server.\n\n## Usage:\n\n    PicoServer.createServer();\n    addServlet(fooServlet);\n    addServlet(barServlet);\n    dispose();\n","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"PicoServer","refId":"spark.server/PicoServer"}]},"isStatic":true,"kind":"method","name":"createServer","id":"createServer1()","comment":"\nCreate an instance of an http server, bound to the given port. If [port] is\n`0`, this will bind to any available port.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"port","id":"port"}],"line":"43"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addServlet","id":"addServlet1()","children":[{"ref":{"name":"PicoServlet","refId":"spark.server/PicoServlet"},"kind":"param","name":"servlet","id":"servlet"}],"line":"55"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"SocketInfo","refId":"chrome.socket/SocketInfo"}]},"kind":"method","name":"getInfo","id":"getInfo0()","line":"57"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"dispose","id":"dispose0()","line":"59"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_serveClient","id":"_serveClient1()","children":[{"ref":{"name":"TcpClient","refId":"spark.tcp/TcpClient"},"kind":"param","name":"client","id":"client"}],"isPrivate":true,"line":"63"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_serve","id":"_serve3()","children":[{"ref":{"name":"PicoServlet","refId":"spark.server/PicoServlet"},"kind":"param","name":"servlet","id":"servlet"},{"ref":{"name":"TcpClient","refId":"spark.tcp/TcpClient"},"kind":"param","name":"client","id":"client"},{"ref":{"name":"HttpRequest","refId":"spark.server/HttpRequest"},"kind":"param","name":"request","id":"request"}],"isPrivate":true,"line":"82"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"port","id":"port","line":"53"},{"ref":{"name":"TcpServer","refId":"spark.tcp/TcpServer"},"kind":"variable","name":"_server","id":"_server","isPrivate":true,"line":"36"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"PicoServlet","refId":"spark.server/PicoServlet"}]},"kind":"variable","name":"_servlets","id":"_servlets","isPrivate":true,"line":"37"},{"kind":"constructor","name":"_","id":"_1()","children":[{"ref":{"name":"TcpServer","refId":"spark.tcp/TcpServer"},"initializedField":{"name":"_server","refId":"spark.server/PicoServer/_server"},"kind":"param","name":"_server","id":"_server","isPrivate":true}],"isPrivate":true,"line":"49"}],"line":"35"}],"uri":"file:///Users/devoncarew/projects/spark.dart/app/lib/server.dart","line":"8"}